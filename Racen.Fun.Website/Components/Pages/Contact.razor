@using System.ComponentModel.DataAnnotations

<div class="container mt-5" id="contact">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h4 class="ContactHeader">Register for Whitelist</h4>
            @if (!isFormDisabled)
            {
                <EditForm Model="@contactModel" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    @* <ValidationSummary /> *@

                    <div class="form-group d-flex">
                        <div class="form-group flex-fill">
                            <ValidationMessage For="@(() => contactModel.Name)" />
                            <input id="name" type="text" class="form-control input-field" @bind="contactModel.Name"
                                placeholder="Enter your name" />
                        </div>
                        <div class="form-group flex-fill">
                            <ValidationMessage For="@(() => contactModel.CountryName)" />
                            <select id="country" class="form-control input-field selectpicker"
                                @bind="contactModel.CountryName" data-live-search="true">
                                <option value="">--Select your country--</option>
                                @foreach (var country in countries)
                                {
                                    <option value="@country.Name" data-code="@country.Code">@country.Name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group flex-fill">
                            <ValidationMessage For="@(() => contactModel.WalletAddress)" />
                            <input id="address" type="text" class="form-control input-field"
                                @bind="contactModel.WalletAddress" placeholder="Enter your SOL address" />
                        </div>
                    </div>
                    <div class="form-group">
                        <ValidationMessage For="@(() => contactModel.Tier)" />
                        <select id="tier" class="form-control input-field selectpicker" @bind="contactModel.Tier">
                            <option value="">--Select your tier--</option>
                            <option value="@Tiers.Stier">S-tier</option>
                            <option value="@Tiers.Atier">A-tier</option>
                            <option value="@Tiers.Btier">B-tier</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <ValidationMessage For="@(() => contactModel.Email)" />
                        <input id="email" type="email" class="form-control input-field" @bind="contactModel.Email"
                            placeholder="Enter your email" />
                        <button type="submit" class="Contact-btn">Submit</button>
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert @alertClass mt-3">@successMessage</div>
                        }
                    </div>
                </EditForm>
            }
            else
            {
                <div class="alert alert-warning">
                    Registration limit reached. We are no longer accepting new registrations.
                </div>
            }
            <div class="alert alert-info mt-3">
                Total registrations: @totalCount / @maxCount
            </div>

            <div class="social-links mt-4">
                <p>Join our channels for news and updates:</p>
                <a href="https://t.me/YourTelegramChannel" target="_blank">
                    <img src="images/telegram.png" alt="Telegram" class="social-logo" /> Telegram
                </a>
                <a href="https://twitter.com/YourTwitterHandle" target="_blank" class="ml-3">
                    <img src="images/twitter.png" alt="Twitter" class="social-logo" /> Twitter
                </a>
            </div>
        </div>
    </div>
</div>

<script>
    function scrollToElement(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollIntoView({ behavior: 'smooth' });
        }
    }
</script>
